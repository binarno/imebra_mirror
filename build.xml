<?xml version="1.0" encoding="utf-8" ?> 
<project name="Imebra" default="build_all" basedir=".">

	<!-- Thsi is an ant build file" -->

	<!-- Build all -->
	<target name="build_all" depends="ZIP_GPL" >
		<exec dir="." executable="hg" failonerror="true">
			<arg value="tag" />
			<arg value="-m" />
			<arg value='"Tagging the repository for Imebra"' />
			<arg value="-u" />
			<arg value="automatic_build" />
			<arg value="imebra_${fileVersion}" />
		</exec>
		<buildnumber file="build.number" /> 
		<exec dir="." executable="hg" failonerror="true">
			<arg value="commit"/>
			<arg value="-m"/>
			<arg value='"Increasing the build number"'/>
			<arg value="-u" />
			<arg value="automatic_build" />
			<arg value="build.number"/>
		</exec>
	</target>

	<!-- Make a zip file and a gzip file of the GPL build -->
	<target name="ZIP_GPL" depends="make_distribution" description ="Compress the build">
		<zip basedir="${build_dir}/distribution" destfile="${builds}/imebra_${fileVersion}.zip" />
	</target>

	<!-- Make the GPL build -->
	<target name="make_distribution" depends="run_test_cases, HTML, PDF, zip_dicomdirItems, zip_dicom2jpeg">
		<property name="distribution" value="${build_dir}/distribution" />
		<property name="librarySource" value="${distribution}/library" />
		<property name="documentation" value="${distribution}/documentation" />

		<copy todir="${librarySource}/base">
			<fileset dir="${build_dir}/base" />
		</copy>
		<copy todir="${librarySource}/imebra">
			<fileset dir="${build_dir}/imebra" />
		</copy>
		<copy file="${build_dir}/generated_doc/latex/refman.pdf" tofile="${documentation}/pdf/imebra.pdf" />
		<copy todir="${documentation}/html">
			<fileset dir="${build_dir}/generated_doc/html" />
		</copy>
		<delete dir="${build_dir}/examples/dicom2jpeg/build" failonerror="true" /> 
		<delete dir="${build_dir}/examples/dicom2jpeg/dist" failonerror="true" /> 
		<delete dir="${build_dir}/examples/dicomdirItems/build" failonerror="true" /> 
		<delete dir="${build_dir}/examples/dicomdirItems/dist" failonerror="true" /> 
		<copy todir="${librarySource}/examples">
			<fileset dir="${build_dir}/examples" />
		</copy>
		<copy file="${build_dir}/docs/gpl.txt" tofile="${distribution}/license.txt" />
	</target>

	<!-- Zip dicomdirItems -->
	<target name="zip_dicomdirItems" depends="build_dicomdirItems" >
		<zip basedir="${build_dir}/examples/dicomdirItems/dist/Release_32/GNU-Linux-x86" destfile="${builds}/dicomdirItems_32bit_${fileVersion}.zip" />
		<zip basedir="${build_dir}/examples/dicomdirItems/dist/Release_64/GNU-Linux-x86" destfile="${builds}/dicomdirItems_64bit_${fileVersion}.zip" />
	</target>

	<!-- Zip dicom2jpeg -->
	<target name="zip_dicom2jpeg" depends="build_dicom2jpeg" >
		<zip basedir="${build_dir}/examples/dicom2jpeg/dist/Release_32/GNU-Linux-x86" destfile="${builds}/dicom2jpeg_32bit_${fileVersion}.zip" />
		<zip basedir="${build_dir}/examples/dicom2jpeg/dist/Release_64/GNU-Linux-x86" destfile="${builds}/dicom2jpeg_64bit_${fileVersion}.zip" />
	</target>

	<!-- Build the HTML documentation -->
	<target name="HTML" depends="run_test_cases" description="Build the HTML documents">
		<exec dir="${build_dir}" executable="doxygen" failonerror="true">
			<arg value="DoxyfileHTML"/>
		</exec>
		<copy todir="${build_dir_html_doc}">
			<fileset dir="${build_dir}/generated_doc/html" />
		</copy>
	</target>

	<!-- Build the PDF documentation -->
	<target name="PDF" depends="run_test_cases" description="Build the PDF document">
		<exec dir="${build_dir}" executable="doxygen" failonerror="true">
			<arg value="DoxyfilePDF"/>
		</exec>
		<exec dir="${build_dir}/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/generated_doc/latex" executable="makeindex">
			<arg value="refman.idx"/>
		</exec>
		<exec dir="${build_dir}/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<copy file="${build_dir}/generated_doc/latex/refman.pdf" tofile="${build_dir}/documentation/imebra.pdf" />
	</target>

	<!-- Build dicomdirItems -->
	<target name="build_dicomdirItems" depends="run_test_cases" description="Build the dicomdirItems">
		<exec executable="make" failonerror="true" dir="${build_dir}/examples/dicomdirItems">
			<arg value="build"/>
			<arg value="CONF=Release_32"/>
		</exec>
		<exec executable="make" failonerror="true" dir="${build_dir}/examples/dicomdirItems">
			<arg value="build"/>
			<arg value="CONF=Release_64"/>
		</exec>
	</target>

	<!-- Build dicom2jpeg -->
	<target name="build_dicom2jpeg" depends="run_test_cases" description="Build the dicom2jpeg">
		<exex executable="qmake" failonerror="true" dir="${build_dir}/examples/dicom2jpeg" />
		<exec executable="make" failonerror="true" dir="${build_dir}/examples/dicom2jpeg" />
	</target>

	<!-- Run the test cases posix -->
	<target name="run_test_cases" depends="build_test_cases" description="Run the test cases">
		<exec executable="${build_dir}/tests/dist/Release/GNU-Linux-x86/tests" dir="${build_dir}/tests/dist/Release/GNU-Linux-x86" resolveexecutable="true" failonerror="true" />
	</target>


	<!-- Build the test cases posix -->
	<target name="build_test_cases" depends="replace_version" description="Build the Imebra test cases posix">
		<exec executable="make" failonerror="true" dir="${build_dir}/tests">
			<arg value="build"/>
			<arg value="CONF=Release"/>
		</exec>
	</target>

	<!-- Replace the version number and license info -->
	<target name="replace_version" depends="create_build_dir">
		<replace file="${build_dir}/DoxyfileCHM" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace file="${build_dir}/DoxyfileHTML" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace file="${build_dir}/DoxyfilePDF" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace file="${build_dir}/DoxyfilePDFH" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace dir="${build_dir}" includes="*.rc,*.h,*.cpp" token="1.0.0.1" value="${fullVersionReadable}" />
		<replace dir="${build_dir}" includes="*.rc,*.h,*.cpp" token="&quot;1.0.0.1&quot;" value="&quot;${fullVersionReadable}&quot;" />
		<replace dir="${build_dir}" includes="*.rc,*.h,*.cpp" token="L&quot;1.0.0.1&quot;" value="L&quot;${fullVersionReadable}&quot;" />
		<replace dir="${build_dir}" token="$fileHeader$">
			<replacevalue><![CDATA[
$imebraVersion$

Imebra: a C++ dicom library.
Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009  by Paolo Brandoli

This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3 
 as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU AFFERO GENERAL PUBLIC LICENSE Version 3 for more details.

You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3
 along with this program; If not, see http://www.gnu.org/licenses/

-------------------

If you want to use Imebra commercially then you have to buy the commercial
 license available at http://puntoexe.com
 
After you buy the commercial license then you can use Imebra according
 to the terms described in the Imebra Commercial License Version 1.
A copy of the Imebra Commercial License Version 1 is available in the 
 documentation pages.

Imebra is available at http://puntoexe.com

The author can be contacted by email at paolo@puntoexe.com or by mail at
 the following address:
 Paolo Brandoli
 Preglov trg 6
 1000 Ljubljana
 Slovenia

]]></replacevalue>
		</replace>
		<replace dir="${build_dir}" token="$imebraVersion$" value="Imebra v. ${fullVersionReadable}" />
	</target>

	<!-- Create the directory for the final build -->
	<target name="create_build_dir" depends="version" description="Create the directory for the final build">
		<property name="builds" value="../builds/imebra_${fileVersion}" />
		<delete dir="${builds}" failonerror="false" /> 
		<mkdir dir="${builds}" />
		<property name="build_dir" value="${builds}/temp_build" />
		<mkdir dir="${build_dir}" />
		<property name="build_dir_html_doc" value="${builds}/imebra_${fileVersion}_html_doc" />
		<mkdir dir="${build_dir_html_doc}" />
		<copy todir="${build_dir}">
			 <fileset dir="project_files"/>
		</copy>
	</target>

	<!-- Initialize the version number -->
	<target name="version" description="Initialize the build number">
		<property file="./build.number" /> 
		<property name="fileVersion" value="0_0_${build.number}"/>
		<property name="fullVersionReadable" value="0.0.${build.number}"/>
		<property name="productName" value="Imebra ${fullVersionReadable}"/>
	</target>


</project>
