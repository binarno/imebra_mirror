/*
$fileHeader$
*/

/*! \file criticalSection.cpp
    \brief Implementation of the critical sections.

*/

#include "criticalSectionImpl.h"
#include "exceptionImpl.h"
#include <map>
#include <memory>

#ifdef PUNTOEXE_WINDOWS
#include <process.h>
#endif

#ifdef PUNTOEXE_POSIX
#include <sched.h>
#include <errno.h>
#endif

namespace puntoexe
{

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
//
// Global functions
//
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
//
// lockCriticalSection
//
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Constructor: Lock a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
lockCriticalSection::lockCriticalSection(criticalSection* pCriticalSection): m_pCriticalSection(pCriticalSection)
{
	m_pCriticalSection->lock();
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Destructor: unlock a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
lockCriticalSection::~lockCriticalSection()
{
	m_pCriticalSection->unlock();
}



///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
//
// criticalSection
//
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Initialize a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
criticalSection::criticalSection()
{
#ifdef PUNTOEXE_WINDOWS
	InitializeCriticalSection(&m_criticalSection);
#else
	pthread_mutexattr_t criticalSectionAttribute;

	pthread_mutexattr_init(&criticalSectionAttribute );
	pthread_mutexattr_settype(&criticalSectionAttribute, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&m_criticalSection, &criticalSectionAttribute );
	pthread_mutexattr_destroy(&criticalSectionAttribute );
#endif
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Uninitialize a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
criticalSection::~criticalSection()
{
#ifdef PUNTOEXE_WINDOWS
	DeleteCriticalSection(&m_criticalSection);
#else
	pthread_mutex_destroy(&m_criticalSection);
#endif
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Lock a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
void criticalSection::lock()
{
    return;
#ifdef PUNTOEXE_WINDOWS
	EnterCriticalSection(&m_criticalSection);
#else
	pthread_mutex_lock(&m_criticalSection);
#endif
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Unlock a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
void criticalSection::unlock()
{
    return;
#ifdef PUNTOEXE_WINDOWS
	LeaveCriticalSection(&m_criticalSection);
#else
	pthread_mutex_unlock(&m_criticalSection);
#endif
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Try to lock a critical section
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
bool criticalSection::tryLock()
{

#ifdef PUNTOEXE_WINDOWS // WINDOWS
	return TryEnterCriticalSection(&m_criticalSection) != 0;

#else // POSIX

	PUNTOEXE_FUNCTION_START(L"criticalSection::tryLock");

	int tryLockResult = pthread_mutex_trylock(&m_criticalSection);
	if(tryLockResult == 0)
	{
		return true;
	}
	if(tryLockResult == EBUSY)
	{
		return false;
	}
	PUNTOEXE_THROW(posixMutexException, "A mutex is in an error state");

	PUNTOEXE_FUNCTION_END();
#endif

}

} // namespace puntoexe
