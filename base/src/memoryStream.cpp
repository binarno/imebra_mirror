/*
$fileHeader$
*/

/*! \file memoryStream.cpp
    \brief Implementation of the memoryStream class.

*/

#include "../include/exception.h"
#include "../include/memoryStream.h"

namespace puntoexe
{

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
//
// memoryStream
//
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Constructor
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
memoryStream::memoryStream(ptr<memory> memoryStream): m_memory(memoryStream)
{
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Write raw data into the stream
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
void memoryStream::write(imbxUint32 startPosition, imbxUint8* pBuffer, imbxUint32 bufferLength)
{
	PUNTOEXE_FUNCTION_START(L"memoryStream::write");

	// Nothing happens if we have nothing to write
	///////////////////////////////////////////////////////////
	if(bufferLength == 0)
	{
		return;
	}

	lockObject lockThis(this);

	// Get a pointer to the memory
	///////////////////////////////////////////////////////////
	stringUint8* pString = m_memory->getStringPointer();

	if(startPosition == pString->size())
	{
		pString->append(pBuffer, bufferLength);
	}
	else
	{
		if(startPosition + bufferLength > pString->size())
		{
			pString->resize(startPosition + bufferLength);
		}
		pString->replace(startPosition, bufferLength, pBuffer);
	}

	PUNTOEXE_FUNCTION_END();
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//
//
// Read raw data from the stream
//
//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
imbxUint32 memoryStream::read(imbxUint32 startPosition, imbxUint8* pBuffer, imbxUint32 bufferLength)
{
	PUNTOEXE_FUNCTION_START(L"memoryStream::read");

	if(bufferLength == 0)
	{
		return 0;
	}

	lockObject lockThis(this);

	// Get a pointer to the memory
	///////////////////////////////////////////////////////////
	stringUint8* pString = m_memory->getStringPointer();

	imbxUint32 memorySize = (imbxUint32)pString->size();
	
	// Don't read if the requested position isn't valid
	///////////////////////////////////////////////////////////
	if(startPosition >= memorySize)
	{
		return 0;
	}

	// Check if all the bytes are available
	///////////////////////////////////////////////////////////
	imbxUint32 copySize = bufferLength;
	if(startPosition + bufferLength > memorySize)
	{
		copySize = memorySize - startPosition;
	}

	if(copySize == 0)
	{
		return 0;
	}

	::memcpy(pBuffer, pString->data() + startPosition, copySize);

	return copySize;

	PUNTOEXE_FUNCTION_END();
}


} // namespace puntoexe
