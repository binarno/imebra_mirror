<?xml version="1.0" encoding="utf-8" ?>
<project name="Imebra" default="make_distribution" basedir="." >

	<!-- This is an ant build file




	-->


	<!-- 

		Initialize the version number.

		This target takes the environment variables IMEBRA_MAJOR_VERSION, IMEBRA_MINOR_VERSION,
		IMEBRA_REVISION and BUILD_BRANCH and uses them to build the final product name.

	-->
	<target name="version" description="Initialize the build number">
		<property environment="env"/>
		<property name="version" value="${IMEBRA_MAJOR_VERSION}.${IMEBRA_MINOR_VERSION}.${IMEBRA_REVISION}" />
		<property name="short_version" value="${IMEBRA_MAJOR_VERSION}.${IMEBRA_MINOR_VERSION}" />
        <property name="fileVersion" value="${env.BUILD_BRANCH}_build_${version}"/>
        <property name="fullVersionReadable" value="${env.BUILD_BRANCH} build ${version}"/>
        <property name="productName" value="Imebra ${fullVersionReadable}"/>
	</target>


	<!-- Create the directory for the build -->
	<target name="create_build_dir" depends="version" description="Create the directory for the final build">
		<property name="build_release" location="./ant-build" />
		<delete dir="${build_release}" failonerror="false" />
		<mkdir dir="${build_release}" />
		<copy todir="${build_release}/library">
			<fileset dir="library" />
		</copy>
		<copy todir="${build_release}/examples">
			<fileset dir="examples" />
		</copy>
		<copy todir="${build_release}/tests">
			<fileset dir="tests" />
		</copy>
		<copy todir="${build_release}/docs">
			<fileset dir="docs" />
		</copy>
		<copy todir="${build_release}" file="build.xml" />
		<copy todir="${build_release}" file="readme.md" />
	</target>

	<!-- Create the directory for the test execution and code coverage -->
	<target name="create_test_dir" depends="version" description="Create the directory for the tests execution">
		<property name="build_dir" location="./ant-build-tests" />
		<delete dir="${build_dir}" failonerror="false" />
		<mkdir dir="${build_dir}" />

		<property name="build_library_for_tests" location="${build_dir}/library-build" />
		<mkdir dir="${build_library_for_tests}" />
		<property name="build_tests" location="${build_dir}/tests-build" />
		<mkdir dir="${build_tests}" />
	</target>

	<!-- Replace the version number and license info -->
	<target name="replace_version" depends="create_build_dir">
		<replace dir="${build_release}" includes="*.h,*.cpp, *.txt, *.rst, *.py" token="1.0.0.1" value="${fullVersionReadable}" />
		<replace dir="${build_release}" includes="*.h,*.cpp, *.txt, *.rst, *.py" token="&quot;1.0.0.1&quot;" value="&quot;${fullVersionReadable}&quot;" />
		<replace dir="${build_release}" includes="*.h,*.cpp, *.txt, *.rst, *.py" token="L&quot;1.0.0.1&quot;" value="L&quot;${fullVersionReadable}&quot;" />
		<replace dir="${build_release}" includes="*.h,*.cpp, *.txt, *.rst, *.py" token="1.0.0" value="${short_version}" />
		<replace dir="${build_release}" includes="*.h,*.cpp, *.txt, *.rst, *.py" token="&quot;1.0.0&quot;" value="&quot;${short_version}&quot;" />
		<replace dir="${build_release}" includes="*.h,*.cpp, *.txt, *.rst, *.py" token="L&quot;1.0.0&quot;" value="L&quot;${short_version}&quot;" />
		<replace dir="${build_release}" token="$fileHeader$">
			<replacevalue><![CDATA[
$imebraVersion$

Imebra: a C++ Dicom library

Copyright (c) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
by Paolo Brandoli/Binarno s.p.

All rights reserved.

This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License version 2 as published by
 the Free Software Foundation.

This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-------------------

If you want to use Imebra commercially then you have to buy the commercial
 license available at http://imebra.com

After you buy the commercial license then you can use Imebra according
 to the terms described in the Imebra Commercial License.
A copy of the Imebra Commercial License is available at http://imebra.com.

Imebra is available at http://imebra.com

The author can be contacted by email at info@binarno.com or by mail at
 the following address:
 Binarno s.p., Paolo Brandoli
 Rakuseva 14
 1000 Ljubljana
 Slovenia


]]></replacevalue>
		</replace>
		<replace dir="${build_release}" token="$imebraVersion$" value="${productName}" />
	</target>

	<!-- SWIG -->
	<target name="swig" depends="replace_version">
		<mkdir dir="${build_release}/library/swig/src/com/imebra" />
		<exec executable="swig" failonerror="true" dir="${build_release}/library/swig">
			<arg value="-java" />
			<arg value="-c++" />
			<arg value="-package" />
			<arg value="com.imebra" />
			<arg value="-outdir" />
			<arg path="${build_release}/library/swig/src/com/imebra" />
			<arg value="swig.i" />
		</exec>

		<fileset id="existing" dir="${build_release}/library/swig/src/com/imebra">
		    <patternset id="files">
		        <include name="**/*.java" />
		    </patternset>
		</fileset>

		<fileset id="matches" dir="${build_release}/library/swig/src/com/imebra">
		    <patternset refid="files" />
		    <contains text=", false);" />
		</fileset>

		<fail message="Found non managed memory objects in one or more files in '${build_release}/library/swig/src/com/imebra'">
		    <condition>
		    	<!-- Counter is 2 because TagsIds and VOIs return non-owned objects -->
		        <resourcecount when="greater" count="2" refid="matches" />
		    </condition>
		</fail>

	</target>

	<!-- Documentation -->
	<target name="documentation" depends="replace_version" >
		<exec executable="sphinx-build" dir="${build_release}/docs">
			<arg value="-b" />
			<arg value="html" />
			<arg path="${build_release}/docs" />
			<arg path="${build_release}/docs/html" />
		</exec>
	</target>

	<target name="create_source_distribution" depends="documentation, swig" >
		<property name="source_distribution" location="./ant-source-distribution" />
		<delete dir="${source_distribution}" failonerror="false" />
		<mkdir dir="${source_distribution}" />

		<copy todir="${source_distribution}/library">
			<fileset dir="${build_release}/library" />
		</copy>
		<copy todir="${source_distribution}/examples">
			<fileset dir="${build_release}/examples" />
		</copy>
		<copy todir="${source_distribution}/tests">
			<fileset dir="${build_release}/tests" />
		</copy>
		<copy todir="${source_distribution}/docs/html">
			<fileset dir="${build_release}/docs/html" />
		</copy>
		<copy todir="${source_distribution}" file="${build_release}/readme.md" />
	</target>


	<!-- Build the test cases -->
	<target name="build_test_cases" depends="create_source_distribution, create_test_dir" description="Build the Imebra test cases">
		<exec executable="cmake" failonerror="true" dir="${build_library_for_tests}">
            <arg value="--verbose"/>
            <arg value="-DCMAKE_BUILD_TYPE=DEBUG" />
            <arg path="${build_release}/library"/>
		</exec>
		<exec executable="make" failonerror="true" dir="${build_library_for_tests}" />

		<property name="gtest_source" value="/usr/src/gtest" />
        <mkdir dir="${build_tests}/gtest" />
        <copy todir="${build_tests}/gtest">
                <fileset dir="${gtest_source}" />
        </copy>
        <delete file="${build_tests}/gtest/CMakeCache.txt" />
		<exec executable="cmake" failonerror="true" dir="${build_tests}/gtest">
	        <arg value="--verbose"/>
	        <arg value="-DCMAKE_BUILD_TYPE=DEBUG" />
	        <arg path="${build_tests}/gtest"/>
		</exec>
		<exec executable="make" failonerror="true" dir="${build_tests}/gtest" />

        <exec executable="cmake" failonerror="true" dir="${build_tests}">
            <arg value="--verbose"/>
            <arg value="-DCMAKE_BUILD_TYPE=DEBUG" />
            <arg path="${build_release}/tests"/>
        </exec>
		<exec executable="make" failonerror="true" dir="${build_tests}" />
	</target>

    <target name="clear_coverage" depends="build_test_cases" description="Initializes the coverage data">
        <exec executable="lcov" dir="${build_tests}" resolveexecutable="true" failonerror="true">
            <arg value="--zerocounters" />
            <arg value="--directory" />
            <arg path="${build_library_for_tests}" />
        </exec>
        <exec executable="lcov" dir="${build_tests}" resolveexecutable="true" failonerror="true">
            <arg value="--capture" />
            <arg value="--initial" />
            <arg value="--directory" />
            <arg path="${build_library_for_tests}" />
            <arg value="--output-file" />
            <arg path="${build_library_for_tests}/test.info" />
        </exec>
    </target>

	<!-- Run the test cases posix -->
    <target name="run_test_cases" depends="build_test_cases, clear_coverage" description="Run the test cases">
        <exec executable="${build_tests}/ImebraTests" dir="${build_tests}" resolveexecutable="true" failonerror="true">
            <arg prefix="--corruptedFilesFolder=" path="${build_release}/tests/corruptedfiles" />
        </exec>
    </target>

    <target name="collect_coverage" depends="run_test_cases" description="Collect the coverage data">
        <exec executable="lcov" dir="${build_tests}" resolveexecutable="true" failonerror="true">
            <arg value="--capture" />
            <arg value="--no-checksum" />
            <arg value="--directory" />
            <arg path="${build_library_for_tests}" />
            <arg value="--output-file" />
            <arg path="${build_library_for_tests}/test.info" />
        </exec>
        <exec executable="lcov" dir="${build_tests}" resolveexecutable="true" failonerror="true">
            <arg value="--extract" />
            <arg path="${build_library_for_tests}/test.info" />
            <arg path="${build_release}/library/*/*.*" />
            <arg path="${build_release}/library/*/*/*.*" />
            <arg value="--output-file" />
            <arg path="${build_library_for_tests}/extracted.info" />
        </exec>
        <mkdir dir="${source_distribution}/docs/coverage" />
        <exec executable="genhtml" dir="${build_tests}" resolveexecutable="true" failonerror="true">
            <arg value="--output-directory" />
            <arg path="${source_distribution}/docs/coverage" />
            <arg path="${build_library_for_tests}/extracted.info" />
        </exec>
    </target>

	<!-- Build -->
    <target name="make_distribution" depends="run_test_cases, collect_coverage">
	</target>


</project>
