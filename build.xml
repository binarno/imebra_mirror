<?xml version="1.0" encoding="utf-8" ?>
<project name="Imebra" default="ZIP" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

	<!-- This is an ant build file" -->


	<!-- Initialize the version number -->
	<target name="version" description="Initialize the build number">
		<property environment="env"/>
                <property name="fileVersion" value="${env.BUILD_BRANCH}_build_${env.BUILD_VERSION}"/>
                <property name="fullVersionReadable" value="${env.BUILD_BRANCH} build ${env.BUILD_VERSION}"/>
                <property name="productName" value="Imebra ${fullVersionReadable}"/>
	</target>


	<!-- Create the directory for the final build -->
	<target name="create_build_dir" depends="version" description="Create the directory for the final build">
		<property name="builds" value="./build" />
		<delete dir="${builds}" failonerror="false" />
		<mkdir dir="${builds}" />
		<property name="build_dir" value="${builds}/temp_build" />
		<mkdir dir="${build_dir}" />
                <property name="build_dir_applications" value="${build_dir}/applications" />
                <mkdir dir="${build_dir_applications}" />
		<property name="build_dir_tests" value="${build_dir_applications}/tests" />
		<mkdir dir="${build_dir_tests}" />
		<property name="build_dir_html_doc" value="${builds}/imebra_${fileVersion}_html_doc" />
		<mkdir dir="${build_dir_html_doc}" />
		<copy todir="${build_dir}">
			 <fileset dir="project_files"/>
		</copy>
		<property name="build_dir_html_doc" value="${builds}/imebra_${fileVersion}_html_doc" />
		<mkdir dir="${build_dir_html_doc}" />
	</target>


	<!-- Replace the version number and license info -->
	<target name="replace_version" depends="create_build_dir">
		<replace file="${build_dir}/DoxyfileHTML" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace dir="${build_dir}" includes="*.rc,*.h,*.cpp" token="1.0.0.1" value="${fullVersionReadable}" />
		<replace dir="${build_dir}" includes="*.rc,*.h,*.cpp" token="&quot;1.0.0.1&quot;" value="&quot;${fullVersionReadable}&quot;" />
		<replace dir="${build_dir}" includes="*.rc,*.h,*.cpp" token="L&quot;1.0.0.1&quot;" value="L&quot;${fullVersionReadable}&quot;" />
		<replace dir="${build_dir}" token="$fileHeader$">
			<replacevalue><![CDATA[
$imebraVersion$

Imebra: a C++ Dicom library

Copyright (c) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015
by Paolo Brandoli/Binarno s.p.

All rights reserved.

This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License version 2 as published by
 the Free Software Foundation.

This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-------------------

If you want to use Imebra commercially then you have to buy the commercial
 license available at http://imebra.com

After you buy the commercial license then you can use Imebra according
 to the terms described in the Imebra Commercial License Version 2.
A copy of the Imebra Commercial License Version 2 is available in the
 documentation pages.

Imebra is available at http://imebra.com

The author can be contacted by email at info@binarno.com or by mail at
 the following address:
 Binarno s.p., Paolo Brandoli
 Rakuseva 14
 1000 Ljubljana
 Slovenia


]]></replacevalue>
		</replace>
		<replace dir="${build_dir}" token="$imebraVersion$" value="${productName}" />
	</target>


	<!-- Build the test cases -->
	<target name="build_test_cases" depends="replace_version" description="Build the Imebra test cases">
		<property name="gtest_source" value="/usr/src/gtest" />
                <mkdir dir="${build_dir_tests}/gtest" />
                <copy todir="${build_dir_tests}/gtest">
                        <fileset dir="${gtest_source}" />
                </copy>
                <delete file="${build_dir_tests}/gtest/CMakeCache.txt" failonerror="false" />
                <delete file="${build_dir_tests}/CMakeCache.txt" failonerror="false" />
		<exec executable="cmake" failonerror="true" dir="${build_dir_tests}">
                    <arg value="--verbose"/>
                    <arg value="-DCMAKE_BUILD_TYPE=DEBUG" />
                    <arg path="${build_dir_tests}/gtest"/>
		</exec>
		<exec executable="make" failonerror="true" dir="${build_dir_tests}" />
                <delete file="${build_dir}/tests/CMakeCache.txt" failonerror="false" />
                <delete file="${build_dir_tests}/CMakeCache.txt" failonerror="false" />
                <exec executable="cmake" failonerror="true" dir="${build_dir_tests}">
                    <arg value="--verbose"/>
                    <arg path="${build_dir}/tests"/>
                    <arg value="-DCMAKE_BUILD_TYPE=DEBUG" />
                </exec>
		<exec executable="make" failonerror="true" dir="${build_dir_tests}" />
	</target>

        <target name="clear_coverage" depends="build_test_cases" if="coverage.set" description="Initializes the coverage data">
            <exec executable="lcov" dir="${build_dir_tests}" resolveexecutable="true" failonerror="true">
                <arg value="--zerocounters" />
                <arg value="--directory" />
                <arg path="${build_dir_tests}" />
            </exec>
            <exec executable="lcov" dir="${build_dir_tests}" resolveexecutable="true" failonerror="true">
                <arg value="--capture" />
                <arg value="--initial" />
                <arg value="--directory" />
                <arg path="${build_dir_tests}" />
                <arg value="--output-file" />
                <arg path="${build_dir_tests}/test.info" />
            </exec>
        </target>

	<!-- Run the test cases posix -->
        <target name="run_test_cases" depends="build_test_cases, clear_coverage" description="Run the test cases">
            <exec executable="${build_dir_tests}/ImebraTests" dir="${build_dir_tests}" resolveexecutable="true" failonerror="true">
                <arg value="--corruptedFilesFolder=${build_dir}/tests/corruptedfiles" />
            </exec>
        </target>

        <target name="collect_coverage" depends="run_test_cases" if="coverage.set" description="Collect the coverage data">
            <exec executable="lcov" dir="${build_dir_tests}" resolveexecutable="true" failonerror="true">
                <arg value="--capture" />
                <arg value="--no-checksum" />
                <arg value="--directory" />
                <arg path="${build_dir_tests}" />
                <arg value="--output-file" />
                <arg path="${build_dir_tests}/test.info" />
            </exec>
            <exec executable="genhtml" dir="${build_dir_tests}" resolveexecutable="true" failonerror="true">
                <arg value="--output-directory" />
                <arg path="${build_dir_tests}/coverage" />
                <arg path="${build_dir_tests}/test.info" />
            </exec>
        </target>

	<!-- Build the HTML documentation -->
	<target name="HTML" depends="run_test_cases" description="Build the HTML documents">
		<exec dir="${build_dir}" executable="doxygen" failonerror="true">
			<arg value="DoxyfileHTML"/>
		</exec>
    		<replace dir="${build_dir}/generated_doc/html" token="Related Pages" value="User manual"/>
		<replace dir="${build_dir}/generated_doc/html" token="Main Page" value="Introduction"/>
		<replace dir="${build_dir}/generated_doc/html" token="Related&amp;#160;Pages" value="User&amp;#160;manual"/>
		<replace dir="${build_dir}/generated_doc/html" token="Main&amp;#160;Page" value="Introduction"/>
		<copy todir="${build_dir_html_doc}">
			<fileset dir="${build_dir}/generated_doc/html" />
		</copy>
	</target>

	<!-- Build -->
        <target name="make_distribution" depends="run_test_cases, collect_coverage, HTML">
		<property name="distribution" value="${build_dir}/distribution" />
		<mkdir dir="${distribution}" />
                <property name="librarySource" value="${distribution}/library" />
		<mkdir dir="${librarySource}" />
                <property name="objectivecSource" value="${distribution}/objectivec" />
                <mkdir dir="${objectivecSource}" />
                <property name="documentation" value="${distribution}/documentation" />
		<mkdir dir="${documentation}/html" />
		<property name="examples" value="${distribution}/examples" />
		<mkdir dir="${examples}/dicom2jpeg" />
		<mkdir dir="${examples}/dicomdirItems" />
		<mkdir dir="${examples}/changeTransferSyntax" />

                <property name="reports" value="${distribution}/reports" />
                <property name="coverage" value="${reports}/coverage" />
                <mkdir dir="${coverage}" if:set="coverage.set"/>
                <copy todir="${coverage}" failonerror="false" if:set="coverage.set">
                    <fileset dir="${build_dir_tests}/coverage" />
                </copy>

		<property name="tests" value="${distribution}/tests" />
		<mkdir dir="${tests}" />

		<copy todir="${librarySource}">
			<fileset dir="${build_dir}/library" />
		</copy>
                <copy todir="${objectivecSource}">
                        <fileset dir="${build_dir}/objectivec" />
                </copy>
                <copy todir="${documentation}/html">
			<fileset dir="${build_dir}/generated_doc/html" />
		</copy>
		<copy file="${build_dir}/docs/documentation.html" tofile="${documentation}/documentation.html" />
		<copy todir="${examples}/dicom2jpeg">
			<fileset dir="${build_dir}/examples/dicom2jpeg" />
		</copy>
		<copy todir="${examples}/dicomdirItems">
			<fileset dir="${build_dir}/examples/dicomdirItems" />
		</copy>
		<copy todir="${examples}/changeTransferSyntax">
			<fileset dir="${build_dir}/examples/changeTransferSyntax" />
		</copy>
                <copy todir="${tests}">
			<fileset dir="${build_dir}/tests" />
		</copy>
		<copy file="${build_dir}/docs/gpl.txt" tofile="${distribution}/license_gpl.txt" />
	</target>

	<!-- Make a zip file and a gzip file of the build -->
	<target name="ZIP" depends="make_distribution" description ="Compress the build">
		<zip basedir="${build_dir}/distribution" destfile="${builds}/imebra_${fileVersion}.zip" />
	</target>

</project>
