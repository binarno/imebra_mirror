<?xml version="1.0" encoding="utf-8" ?> 
<project name="Imebra" default="build all" basedir=".">

	<!-- Before calling this project, set the following properties:
	
	puntoexeLibrary: path to the SVN repository for imebra (root, not trunk)
	userName: user name to be used to access to the SVN repository
	password: password to be used to access to the SVN repository
	dev_executable: name of the MSVC executable	
	build_with_version: define if the build has to increase the version number
	
	-->

	<!-- Build all -->
	<target name="build all" depends="ZIP_GPL" description="Tag the repository" >
		<antcall target="copy_svn" /> 
	</target>
	
	<target name="copy_svn" if="build_with_version">
		<exec dir="." executable="svn">
			<arg value="copy"/>
			<arg path="."/>
			<arg value="${puntoexeLibrary}/tags/imebra_${fileVersion}"/>
			<arg value="-m"/>
			<arg value='"Tagging the repository for Imebra"'/>
		</exec>
		<buildnumber file="build.number" /> 
		<exec dir="." executable="svn">
			<arg value="commit"/>
			<arg value="build.number"/>
			<arg value="-m"/>
			<arg value='"Increasing the build number"'/>
		</exec>
	</target>

	<!-- Make a zip file and a gzip file of the GPL build -->
	<target name="ZIP_GPL" depends="CHM, PDF, PDF_hyperlinked, create_GPL" description ="Compress the build">
		<delete dir="${build_dir}/puntoexe_library/generated_doc" />
		<zip basedir="${build_dir}" destfile="${builds}/imebra_${fileVersion}.zip" />
	</target>

	<!-- Copy the GPL build -->
	<target name="create_GPL" depends="create_build_dir, run_test_cases, run_test_cases_posix" description="Copy the library in the GPL build">
		<mkdir dir="${build_dir}/documentation" />
		<mkdir dir="${build_dir}/puntoexe_library/base" />
		<mkdir dir="${build_dir}/puntoexe_library/imebra" />
		<mkdir dir="${build_dir}/puntoexe_library/docs" />
		<copy file="project_files/DoxyFileCHM" tofile="${build_dir}/puntoexe_library/DoxyFileCHM" />
		<copy file="project_files/DoxyFileHTML" tofile="${build_dir}/puntoexe_library/DoxyFileHTML" />
		<copy file="project_files/DoxyFilePDF" tofile="${build_dir}/puntoexe_library/DoxyFilePDF" />
		<copy file="project_files/DoxyFilePDFH" tofile="${build_dir}/puntoexe_library/DoxyFilePDFH" />
		<copy todir="${build_dir}/puntoexe_library/base">
			<fileset dir="project_files/base" />
		</copy>
		<copy todir="${build_dir}/puntoexe_library/imebra">
			<fileset dir="project_files/imebra" />
		</copy>
		<copy todir="${build_dir}/puntoexe_library/docs">
			<fileset dir="project_files/docs" />
		</copy>
		<copy file="project_files/docs/gpl.txt" tofile="${build_dir}/license.txt" />
		<replace dir="${build_dir}/puntoexe_library" token="$fileHeader$">
			<replacevalue><![CDATA[
Imebra: a C++ dicom library.
Copyright (C) 2003, 2004, 2005, 2006  by Paolo Brandoli

This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License version 2 as published by
 the Free Software Foundation.

This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-------------------

If you want to use Imebra commercially then you have to buy the commercial
 support available at http://puntoexe.com
 
After you buy the commercial support then you can use Imebra according
 to the terms described in the Imebra Commercial License Version 1.
A copy of the Imebra Commercial License Version 1 is available in the 
 documentation pages.

Imebra is available at http://puntoexe.com

The author can be contacted by email at paolo@puntoexe.com or by mail at
 the following address:
 Paolo Brandoli
 Rjava Cesta 2/a
 1000 Ljubljana
 Slovenia

]]></replacevalue>
		</replace>
	</target>

	<!-- Build the CHM documentation -->
	<target name="CHM" depends="documentation_version, create_build_dir" description="Build the CHM document">
		<exec dir="${build_dir}/puntoexe_library" executable="doxygen" failonerror="true">
			<arg value="doxyfileCHM"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/chm" executable="${hhc_executable}">
			<arg file="${build_dir}/puntoexe_library/generated_doc/chm/index.hhp"/>
		</exec>
		<copy file="${build_dir}/puntoexe_library/generated_doc/chm/index.chm" tofile="${build_dir}/documentation/imebra.chm" />
	</target>

	<!-- Build the HTML documentation -->
	<target name="HTML" depends="documentation_version, create_build_dir" description="Build the HTML documents">
		<exec dir="${build_dir}/puntoexe_library" executable="doxygen" failonerror="true">
			<arg value="doxyfileHTML"/>
		</exec>
	</target>

	<!-- Build the PDF documentation -->
	<target name="PDF" depends="documentation_version, create_build_dir" description="Build the PDF document">
		<exec dir="${build_dir}/puntoexe_library" executable="doxygen" failonerror="true">
			<arg value="doxyfilePDF"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latex" executable="makeindex">
			<arg value="refman.idx"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latex" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<copy file="${build_dir}/puntoexe_library/generated_doc/latex/refman.pdf" tofile="${build_dir}/documentation/imebra.pdf" />
	</target>

	<!-- Build the Hyperlinked PDF documentation -->
	<target name="PDF_hyperlinked" depends="documentation_version, create_build_dir" description="Build the hyperlinked PDF document">
		<exec dir="${build_dir}/puntoexe_library" executable="doxygen" failonerror="true">
			<arg value="doxyfilePDFH"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latexH" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latexH" executable="makeindex">
			<arg value="refman.idx"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latexH" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latexH" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<exec dir="${build_dir}/puntoexe_library/generated_doc/latexH" executable="pdflatex">
			<arg value="refman.tex"/>
		</exec>
		<copy file="${build_dir}/puntoexe_library/generated_doc/latexH/refman.pdf" tofile="${build_dir}/documentation/imebraLinks.pdf" />
	</target>

	<!-- Build the documentation -->
	<target name="documentation_version" depends="version, create_GPL" description="Replace the documentation version">
		<replace file="${build_dir}/puntoexe_library/doxyfileCHM" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace file="${build_dir}/puntoexe_library/doxyfileHTML" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace file="${build_dir}/puntoexe_library/doxyfilePDF" token="1.0.0.1" value='"${fullVersionReadable}"'/>
		<replace file="${build_dir}/puntoexe_library/doxyfilePDFH" token="1.0.0.1" value='"${fullVersionReadable}"'/>
	</target>

	<!-- Run the test cases -->
	<target name="run_test_cases" depends="Build test cases" description="Run the test cases">
		<exec executable="project_files/tests/CImbx_tests/debug/CImbx_tests.exe" resolveexecutable="true" failonerror="true" />
	</target>

	<!-- Run the test cases posix -->
	<target name="run_test_cases_posix" depends="Build test cases posix" description="Run the test cases">
		<exec executable="project_files/tests/CImbx_tests/debug_iconv/CImbx_tests.exe" resolveexecutable="true" failonerror="true" />
	</target>


	<!-- Build the test cases -->
	<target name="Build test cases" depends="create_build_dir" description="Build the Imebra test cases">
		<exec executable="${dev_executable}" failonerror="true">
			<arg value="/out"/>
			<arg file="./builds/testCasesBuildLog.txt"/>
			<arg value="/rebuild"/>
			<arg value="debug"/>
			<arg value="/project"/>
			<arg file="./project_files/tests/CImbx_tests/CImbx_tests.vcproj"/>
			<arg file="./project_files/puntoexe_library.sln"/>
		</exec>
	</target>

	<!-- Build the test cases posix -->
	<target name="Build test cases posix" depends="create_build_dir" description="Build the Imebra test cases posix">
		<exec executable="${dev_executable}" failonerror="true">
			<arg value="/out"/>
			<arg file="builds/testCasesPosixBuildLog.txt"/>
			<arg value="/rebuild"/>
			<arg value="debug_posix"/>
			<arg value="/project"/>
			<arg file="./project_files/tests/CImbx_tests/CImbx_tests.vcproj"/>
			<arg file="./project_files/puntoexe_library.sln"/>
		</exec>
	</target>

	<!-- Create the directory for the final build -->
	<target name="create_build_dir" depends="version" description="Create the directory for the final build">
		<property name="builds" value="builds" />
		<property name="build_dir" value="${builds}/imebra_${fileVersion}" />
		<mkdir dir="${builds}" />
		<delete dir="${build_dir}" failonerror="false" /> 
		<mkdir dir="${build_dir}" />
		<delete file="${builds}/imebra_${fileVersion}.zip" failonerror="false" /> 
	</target>

	<!-- Initialize the version number -->
	<target name="version" description="Initialize the build number">
		<property file="./build.number" /> 
		<property name="fileVersion" value="0_0_${build.number}_Alpha"/>
		<property name="fullVersionReadable" value="0.0.${build.number}_Alpha"/>
		<property name="productName" value="Imebra ${fullVersionReadable}"/>
	</target>


</project>